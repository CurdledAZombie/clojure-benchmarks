July 28, 2009

The non-Clojure versions of these benchmark programs have been
downloaded from this web site:

http://shootout.alioth.debian.org

See the file COPYING for the licenses under which these files are
distributed.

So far I have Clojure implementations for the benchmarks noted in the
table below.

                               Amenable to
                    Sequential parallel    Parallel
                    Clojure    implement-  Clojure
Benchmark           program?   ation?      program?
------------------- ---------- ----------- --------
n-body               yes          no         no
meteor-contest        no           ?         no
spectral-norm         no         yes         no
------------------- ---------- ----------- --------
fannkuch             yes         yes         no
k-nucleotide         yes         yes         no
  (directory knuc)
mandelbrot           yes         yes         no
------------------- ---------- ----------- --------
fasta                 no          no         no
thread-ring          N/A         yes         no
chameneos-redux      N/A         yes         no
------------------- ---------- ----------- --------
regex-dna            yes         (1)         no
pidigits              no          no         no
binary-trees          no           ?         no
reverse-complement   yes          no         no
  (directory rcomp)
------------------- ---------- ----------- --------

(1) Several entries to the language shootout web site are parallel,
but I don't yet know how they try to take advantage of parallelism for
this problem.


I have hacked up some shell scripts to automate the compilation and
running of some of these programs.  They have been tested on Mac OS X
10.5.7 with recent versions of the Glasgow Haskell Compiler ghc, SBCL
Common Lisp, Perl, the version of Java distributed by Apple, and a
recent version of Clojure (either 1.0.0 or more recent, I don't
recall).  See below for the steps I used to install SBCL and ghc.

You should edit the file env.sh to point at the location of your
Clojure JAR file, and perhaps give explicit path names to some of the
other language implementations, if you wish.

The k-nucleotide, regex-dna, and reverse-complement benchmark input
files are quite large (250 Mbytes), and not included in the
distribution.  These input files must be generated by running this
shell script:

./init.sh

That will generate the input files only.  You can also choose to
generate those plus the "expected output files" (which are just the
output of the Java versions of the benchmark programs) by running
this:

./init.sh output

If you have the input files generated, you can run all of the
implementations of the k-nucleotide benchmark, with the quick, medium,
and long test input sizes, using these commands:

cd knuc
./batch.sh

You can also pick and choose which benchmark lengths to run, and which
language implementations to run, by giving options like these on the
command line:

./batch.sh java clj quick medium

That would run both the Clojure and Java versions of the benchmark,
each with the quick and medium size input files.  The following
command would run only the Clojure version with the long input file:

./batch.sh clj long

If you find any improvements to the Clojure versions, I'd love to hear
about them.

The file RESULTS contains some summarized execution times from running
these programs on my home iMac.  It also has copies of some of the
running times reported on the shootout web site above, which were run
on different machine (see RESULTS for some specs).


Andy Fingerhut
andy_fingerhut@alum.wustl.edu


----------------------------------------------------------------------
On a Mac OS X machine (tested on 10.5.7 at least), download and install
MacPorts from here:

http://www.macports.org

After following the instructions there for installing MacPorts, you
can install the Glasgow Haskell compiler with the command:

sudo port install ghc

And SBCL with the threads (i.e. multi-threading) option enabled with
this command:

sudo port install sbcl@+threads


Here are the versions I currently have installed used to produce some
of my benchmark results:

% port installed ghc sbcl
The following ports are currently installed:
  ghc @6.10.1_8+darwin_9_i386 (active)
  sbcl @1.0.24_0+darwin_9_i386+html+test+threads (active)

% java -version
java version "1.6.0_13"
Java(TM) SE Runtime Environment (build 1.6.0_13-b03-211)
Java HotSpot(TM) 64-Bit Server VM (build 11.3-b02-83, mixed mode)

% javac -version
javac 1.6.0_13

% sbcl --version
SBCL 1.0.29

% ghc --version
The Glorious Glasgow Haskell Compilation System, version 6.10.1

----------------------------------------------------------------------

I've also done some testing of this set of scripts on an Ubuntu 9.04
Desktop i386 installation, in a VMWare Fusion virtual machine running
on my Mac.

I've tried it with these versions of packages installed using Ubuntu's
Synaptic Package Manager.

sun-java6-jdk 6-14-0ubuntu1.9.04
sbcl 1.0.18.0-2
ghc 6.8.2dfsg1-1ubuntu1


% java -version
java version "1.6.0_14"
Java(TM) SE Runtime Environment (build 1.6.0_14-b08)
Java HotSpot(TM) Client VM (build 14.0-b16, mixed mode, sharing)

% javac -version
javac 1.6.0_14

% sbcl --version
SBCL 1.0.18.debian

% ghc --version
The Glorious Glasgow Haskell Compilation System, version 6.8.2

Apparently the Haskell k-nucleotide program requires GHC 6.10 or
later, and gives a compilation error with GHC 6.8.x, as is currently
the latest available through Ubuntu's distribution system.  If you
really want to run that benchmark, you could try installing GHC 6.10
yourself.  This web page may provide the right recipe for doing so.  I
haven't tried it myself.

http://www.johnmacfarlane.net/Gitit%20on%20Ubuntu

----------------------------------------------------------------------
