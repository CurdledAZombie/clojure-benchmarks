: # use perl -*-Perl-*-
eval 'exec perl -S "$0" ${1+"$@"}'
    if 0;
# -*cperl-*-

use strict;
use Getopt::Long;
use File::Basename;
# FindBin is a library to find the directory in which the script is
# installed.  This can be useful for making it easy to install other
# auxiliary files needed by the script all in one place, and no matter
# where someone installs 'the whole package' of files, the script can
# find them, without needing hand-editing.
use FindBin;
use XML::LibXML;


my $verbose = 0;
my $full_progname = $0;
my $progname = fileparse($full_progname);
# TBD: Delete save_dir_name if not needed.
my $save_dir_name;


sub usage {
    print STDERR
"usage: $progname [ --help ] [ --verbose ]
               [ --xml ]
               [ --log-file <log_file> ]
               [ --jvm-gc-stats <jvm_type> ]
               <gc-log-file>

    --help        Show this help.

    --verbose     Enable debug messages.  Also, by default only the
                  first few warnings of a particular kind will be
                  printed, with the count of how many more that were
                  not printed.  If --verbose is specified, then all
                  warnings will be printed in their entirety.

    --xml         Print GC log summary output in XML format.

    --log-file <log_file>
                  Append output to file <log_file>, creating
                  <log_file> if it does not exist already.

    --jvm-gc-stats <jvm_type>
                  When this option is used, $progname will assume that
                  <gc-log-file> was produced via a JVM of the
                  specified type.  The following are supported by
                  $progname:

                    hotspot
                    jrockit

Examples:

Here is a short GC log file output by the Sun/Oracle Hotspot JVM,
version 1.6.0_22, when given the -Xloggc:<log_file> option (see
further below for an example output from the Oracle JRockit JVM):

    0.976: [GC 12288K->1168K(47104K), 0.0193362 secs]
    1.529: [GC 13456K->1504K(59392K), 0.0072646 secs]
    2.771: [GC 26080K->1680K(59392K), 0.0071353 secs]
    2.972: [GC 24080K->2912K(83968K), 0.0118836 secs]
    3.149: [GC 52064K->12864K(83968K), 0.0229997 secs]
    3.441: [GC 62016K->22677K(133056K), 0.0234928 secs]
    4.223: [GC 120981K->22656K(133056K), 0.0069550 secs]
    4.796: [GC 120960K->37680K(228416K), 0.0939423 secs]
    4.890: [Full GC 37680K->26362K(249280K), 0.1673596 secs]
    6.326: [GC 216954K->26394K(255296K), 0.0008794 secs]
	
The format of these lines is:

    <time>: [<gc_type> <before>-><after>(<heap>), <duration>]

where:

    <time> is the time in sec since the JVM started.
    <gc_type> indicates whether it was a full or partial GC.
    <before> is the amount of heap memory used before that particular
        GC invocation began.
    <after> is the amount of heap memory used when that GC invocation
        was finished.
    <heap> is the total JVM heap size.
    <duration> is the time taken for that GC invocation.

Invoking this command gives the indicated output, explained below in
more detail:

    % $progname gc-log1.txt 
        GC log file name          : gc-log1.txt
        Number of GCs             : 10
        Total memory GCed (KB)    : 530662
        Total GC time (sec)       : 0.3612485
        Maximum total available memory (KB): 255296
        Maximum total allocated memory (KB): 216954
        Maximum total live memory (KB)     : 37680

'Number of GCs' is the number of times GC was invoked, according to the
log.  This is once for each of the lines shown above.

'Total memory GCed' is the total of (<before>-<after>), summed over
all GCs.  Note: It sometimes occurs that <before> is less than
<after>, i.e. there is more heap memory allocated after a GC than
before.  I do not know why this occurs, but it tends not to increase
the allocated memory by very much.  $progname does not include such
lines in the 'Total memory GCed' calculation at all, positively or
negatively.

'Total GC time' is the total of all <duration> values.

'Maximum total available memory' is the maximum of all <heap> values.

'Maximum total allocated memory' is the maximum of all <before>
values.  The program may have allocated more than this after the last
GC, and never performed another GC before finishing.  This cannot be
accounted for by $progname, which simply goes by what is in the GC
log.

'Maximum total live memory' is the maximum of all <after> values.
There may have been more total live memory allocated at times in
between GC invocations, but $progname has no way of detecting this.


Here is a short GC log file output by the Oracle JRockit JVM, version
1.6.0_20, when given the options '-Xverbose:memory
-Xverbloselog:<log_file>':

    [INFO ][memory ] GC mode: Garbage collection optimized for throughput, strategy: Generational Parallel Mark & Sweep.
    [INFO ][memory ] Heap size: 65536KB, maximal heap size: 1048576KB, nursery size: 32768KB.
    [INFO ][memory ] <start>-<end>: <type> <before>KB-><after>KB (<heap>KB), <time> ms, sum of pauses <pause> ms.
    [INFO ][memory ] <start>  - start time of collection (seconds since jvm start).
    [INFO ][memory ] <type>   - OC (old collection) or YC (young collection).
    [INFO ][memory ] <end>    - end time of collection (seconds since jvm start).
    [INFO ][memory ] <before> - memory used by objects before collection (KB).
    [INFO ][memory ] <after>  - memory used by objects after collection (KB).
    [INFO ][memory ] <heap>   - size of heap after collection (KB).
    [INFO ][memory ] <time>   - total time of collection (milliseconds).
    [INFO ][memory ] <pause>  - total sum of pauses during collection (milliseconds).
    [INFO ][memory ]            Run with -Xverbose:gcpause to see individual phases.
    [INFO ][memory ] Running on hypervisor Unknown (but probably running on a hypervisor)
    [INFO ][memory ] [YC#1] 5.942-5.958: YC 33408KB->10562KB (65536KB), 0.016 s, sum of pauses 15.881 ms, longest pause 15.881 ms.
    [INFO ][memory ] [YC#2] 6.205-6.239: YC 45042KB->23348KB (65536KB), 0.034 s, sum of pauses 33.860 ms, longest pause 33.860 ms.
    [INFO ][memory ] [YC#3] 6.484-6.573: YC 57906KB->65536KB (65536KB), 0.089 s, sum of pauses 88.892 ms, longest pause 88.892 ms.
    [INFO ][memory ] [OC#1] 6.574-6.591: OC 65536KB->11537KB (65536KB), 0.017 s, sum of pauses 15.042 ms, longest pause 15.042 ms.
    [INFO ][memory ] [YC#4] 7.147-7.168: YC 54068KB->35507KB (65536KB), 0.021 s, sum of pauses 20.484 ms, longest pause 20.484 ms.
    [INFO ][memory ] [YC#5] 7.610-7.612: YC 60082KB->35508KB (65536KB), 0.001 s, sum of pauses 1.138 ms, longest pause 1.138 ms.
    [INFO ][memory ] [YC#6] 8.180-8.182: YC 60082KB->35571KB (65536KB), 0.002 s, sum of pauses 2.221 ms, longest pause 2.221 ms.
    [INFO ][memory ] [YC#7] 8.510-8.551: YC 62130KB->65536KB (65536KB), 0.041 s, sum of pauses 40.855 ms, longest pause 40.855 ms.
    [INFO ][memory ] [OC#2] 8.551-8.585: OC 65536KB->27180KB (65536KB), 0.034 s, sum of pauses 32.871 ms, longest pause 32.871 ms.
    [INFO ][memory ] [YC#8] 8.875-8.878: YC 54178KB->33930KB (65536KB), 0.002 s, sum of pauses 2.232 ms, longest pause 2.232 ms.
    [INFO ][memory ] [YC#9] 9.059-9.060: YC 54178KB->33930KB (65536KB), 0.001 s, sum of pauses 1.268 ms, longest pause 1.268 ms.

The header lines at the beginning are ignored completely.  The format
of the remaining lines is given in one of the header lines as:

    [INFO ][memory ] <start>-<end>: <type> <before>KB-><after>KB (<heap>KB), <time> ms, sum of pauses <pause> ms.

It is not mentioned there, but many of the line also have 'longest
pause <longest_pause>' at the end of the line.

<before>, <after>, and <heap> are the same as for the Hotspot JVM GC
log.  <start>-<end> are like Hotspot's time, except they give both a
start and end time of this GC invocation relative to when the JVM
started.  <pause> are the values summed to calculate the output value
'Total GC time'.

<time> and <pause> seem like they should always be the same, but I
have seen cases where they were significantly different, so $progname
prints a warning for such lines in case this is a sign of a problem.

<longest_pause> is ignored by $progname, except that a warning is
printed if it is longer than <pause>.  Similarly <start> and <end> are
ignored, except a warning is printed if (<end>-<start>) is
significantly different than <time>.  <type> is completely ignored.


TBD: It might be nice to add more statistics calculation to this
program, e.g. some of those calculated by the GC Portal from
Sun/Oracle:

http://java.sun.com/developer/technicalArticles/Programming/GCPortal/

This StackOverflow Q&A gives several other tools for analyzing GC
logs:

http://stackoverflow.com/questions/541832/know-of-any-java-garbage-collection-log-analysis-tools
";
}

######################################################################
# Get command line options
######################################################################

my $help;
my $output_format_xml;
my $log_file;
my $jvm_gc_stats_from_cmd_line;
Getopt::Long::Configure('require_order');
if (!GetOptions('help' => \$help,
		'verbose' => \$verbose,
		'xml' => \$output_format_xml,
		'log-file=s' => \$log_file,
                'jvm-gc-stats=s' => \$jvm_gc_stats_from_cmd_line
               ))
{
    usage();
    exit(1);
}

if ($help) {
    usage();
    exit(0);
}
my $gc_stats_type;
if (defined($jvm_gc_stats_from_cmd_line)) {
    $gc_stats_type = $jvm_gc_stats_from_cmd_line;
}
if (defined($gc_stats_type)) {
    if ($gc_stats_type eq 'hotspot') {
        # OK
    } elsif ($gc_stats_type eq 'jrockit') {
        # OK
    } else {
        printf STDERR
"Unrecognized value '%s' given after option %s
The following are supported: hotspot jrockit
",
            $gc_stats_type,
            '--jvm-gc-stats';
        exit 1;
    }
}

# TBD: Make it so that specifying -, /dev/stdin, or no file on the
# command line means to read from stdin.
my $gc_log_filename;
if ($#ARGV < 0) {
    printf STDERR "No GC log file specified.\n";
    usage();
    exit 1;
}
$gc_log_filename = $ARGV[0];

my $log;
if (defined($log_file)) {
    open($log, ">>$log_file")
	or die sprintf "Could not open log file '%s' for appending: %s",
	                $log_file, $!;
} else {
    $log = *STDOUT;
}

######################################################################
# If --jvm-gc-stats option was given, read the GC log file and
# calculate summary GC performance stats.
######################################################################

my $gc_stats = parse_jvm_gc_log($gc_stats_type, $gc_log_filename);


######################################################################
# Print the performance stats in the desired format.
######################################################################

if ($output_format_xml) {

    # Create a new document
    my $xmldoc = XML::LibXML::Document->new();

    # ... with root element having tag MeasurementList
    my $mlist = $xmldoc->createElement('MeasurementList');
    $xmldoc->setDocumentElement($mlist);

    # ... and that root element has a first child with tag Measurement
    my $measurement = $xmldoc->createElement('Measurement');
    $mlist->appendChild($measurement);
    
    # Now fill in the fields of that measurement
    my $tag_text_pairs = [];
    if ($gc_log_filename ne '') {
	push @{$tag_text_pairs}, 'gc_log_file_name', $gc_log_filename;
    }
    if (defined($gc_stats->{parse_gc_log_fail_info})) {
	push @{$tag_text_pairs}, 'parse_gc_log_failure_details',
	    $gc_stats->{parse_gc_log_failure_details};
    } else {
	push @{$tag_text_pairs}, 'number_of_gcs',
	    $gc_stats->{num_gcs};
	push @{$tag_text_pairs}, 'total_memory_gced_kb',
	    $gc_stats->{total_mem_collected_kb};
	push @{$tag_text_pairs}, 'total_gc_time_sec',
	    $gc_stats->{total_gc_time_sec};
	push @{$tag_text_pairs}, 'maximum_total_available_memory_kb',
	    $gc_stats->{max_total_avail_mem_kb};
	push @{$tag_text_pairs}, 'maximum_total_allocated_memory_kb',
	    $gc_stats->{max_total_allocated_mem_kb};
	push @{$tag_text_pairs}, 'maximum_total_live_memory_kb',
	    $gc_stats->{max_total_live_mem_kb};
	push @{$tag_text_pairs}, 'num_errors',
	    $gc_stats->{num_errors};
	push @{$tag_text_pairs}, 'num_warnings',
	    $gc_stats->{num_warnings};
    }

    libxml_add_children_to_elem($xmldoc, $measurement, $tag_text_pairs);

    # and finally print out the XML file.
    print $log $xmldoc->toString(1);

} else {

    if ($gc_log_filename ne '') {
	printf $log "    GC log file name          : %s\n", $gc_log_filename;
    }
    if (defined($gc_stats->{parse_gc_log_failure_details})) {
	printf $log "    Failure details of parsing GC log: %s\n",
	    $gc_stats->{parse_gc_log_failure_details};
    } else {
	printf $log "    Number of GCs             : %s\n",
	    $gc_stats->{num_gcs};
	printf $log "    Total memory GCed (KB)    : %s\n",
	    $gc_stats->{total_mem_collected_kb};
	printf $log "    Total GC time (sec)       : %s\n",
	    $gc_stats->{total_gc_time_sec};
	printf $log "    Maximum total available memory (KB): %s\n",
	    $gc_stats->{max_total_avail_mem_kb};
	printf $log "    Maximum total allocated memory (KB): %s\n",
	    $gc_stats->{max_total_allocated_mem_kb};
	printf $log "    Maximum total live memory (KB)     : %s\n",
	    $gc_stats->{max_total_live_mem_kb};
	printf $log "    Number of parsing errors  : %s\n",
	    $gc_stats->{num_errors};
	printf $log "    Number of parsing warnings: %s\n",
	    $gc_stats->{num_warnings};
    }
}

exit 0;


sub parse_jvm_gc_log {
    my $gc_stats_type = shift;
    my $gc_log_filename = shift;

    my $num_error_lines = 0;
    my $max_error_lines_to_print = 5;
    my $num_unparseable_lines = 0;
    my $max_unparseable_lines_to_print = 5;

    my $num_mem_increase_warnings = 0;
    my $max_mem_increase_warnings_to_print = 3;
    my $num_start_end_time_warnings = 0;
    my $max_start_end_time_warnings_to_print = 3;
    my $num_pause_time_warnings = 0;
    my $max_pause_time_warnings_to_print = 3;
    my $num_longest_pause_time_warnings = 0;
    my $max_longest_pause_time_warnings_to_print = 3;

    my $num_gcs = 0;
    my $total_mem_collected_kb = 0;
    my $total_gc_time_sec = 0;
    my $max_total_avail_mem_kb = 0;
    my $max_total_allocated_mem_kb = 0;
    my $max_total_live_mem_kb = 0;
    my $parse_gc_log_fail_info;

    open(FH, '<', $gc_log_filename)
	or die sprintf "Could not open file %s for reading", $gc_log_filename;
    # TBD: Handle error in attempting to open file or parse file more
    # cleanly, i.e. by continuing and printing results without GC
    # summary stats.
    my $linenum = 0;
    my $already_saved_copy_of_gc_log = 0;
    while (my $line = <FH>) {
	++$linenum;
	chomp $line;
	if ($line =~ /\r$/) {
	    chop $line;
	}
	if ($line =~
	    /^\s*\d+\.\d+:\s+\[(GC|GC--|Full GC) (\d+)K->(\d+)K\((\d+)K\), (\S+) secs\]\s*$/)
	{
	    my ($gc_type, $live_before_this_gc_kb, $live_after_this_gc_kb,
		$total_avail_space_kb, $gc_time) = ($1, $2, $3, $4, $5);
	    # Notes from this source:
	    # http://www.oracle.com/technetwork/java/gc-tuning-5-138395.html
	    
	    # $live_before_this_gc_kb space consists of objects that
	    # are actually live, or they are dead but still referenced
	    # from a tenured generation object after a previous minor
	    # GC.
	    
	    # Similarly for $live_after_this_gc_kb
	    
	    # $total_avail_space_kb is the total available space, not
	    # counting the space in the permanent generation, which is
	    # the total heap minus one of the survivor spaces.
	    
	    ++$num_gcs;
	    my $mem_collected_this_gc_kb = ($live_before_this_gc_kb -
					    $live_after_this_gc_kb);
	    if ($mem_collected_this_gc_kb < 0) {
		$mem_collected_this_gc_kb = 0;
		if ($verbose || ($num_mem_increase_warnings <
				 $max_mem_increase_warnings_to_print))
		{
		    printf STDERR "Warning: %s < %s in line %d of GC log file '%s': %s\n",
		        $live_before_this_gc_kb, $live_after_this_gc_kb,
		        $linenum, $gc_log_filename, $line;
		}
		++$num_mem_increase_warnings;
	    }
	    $total_mem_collected_kb += $mem_collected_this_gc_kb;
	    $total_gc_time_sec += $gc_time;
	    if ($total_avail_space_kb > $max_total_avail_mem_kb) {
		$max_total_avail_mem_kb = $total_avail_space_kb;
	    }
	    if ($live_before_this_gc_kb > $max_total_allocated_mem_kb) {
		$max_total_allocated_mem_kb = $live_before_this_gc_kb;
	    }
	    if ($gc_type eq 'GC--') {
		# I've seen several of these where the
		# $live_after_this_gc_kb number is larger than the
		# $live_before_this_gc_kb number, and the after number
		# is significantly larger than the after number of
		# other GCs.  Until I find out what these mean, I'm
		# going to leave such GC lines out of the calculation
		# of the $max_total_live_mem_kb.
	    } else {
		if ($live_after_this_gc_kb > $max_total_live_mem_kb) {
		    $max_total_live_mem_kb = $live_after_this_gc_kb;
		}
	    }
	} elsif ($line =~ /^\s*\[INFO \]\[memory \] \[[YO]C#\d+\] (\d+(\.\d+)?)-(\d+(\.\d+)?): ([YO]C) (\d+)KB->(\d+)KB \((\d+)KB\), (\d+(\.\d+)?) s, sum of pauses (\d+(\.\d+)?) ms, longest pause (\d+(\.\d+)?) ms\.\s*$/) {
	    # TBD: Try to make this case and the one above share
	    # common code, rather than duplicating it.
	    my ($gc_start_time_sec, $gc_end_time_sec, $gc_type,
		$live_before_this_gc_kb, $live_after_this_gc_kb,
		$total_avail_space_kb, $gc_time_sec,
		$gc_time_msec, $gc_longest_pause_time_msec) =
		($1, $3, $5, $6, $7, $8, $9, $11, $13);
	    ++$num_gcs;
	    my $mem_collected_this_gc_kb = ($live_before_this_gc_kb -
					    $live_after_this_gc_kb);
	    if ($mem_collected_this_gc_kb < 0) {
		$mem_collected_this_gc_kb = 0;
		if ($verbose || ($num_mem_increase_warnings <
				 $max_mem_increase_warnings_to_print))
		{
		    printf STDERR "Warning: %s < %s in line %d of GC log file '%s': %s\n",
		        $live_before_this_gc_kb, $live_after_this_gc_kb,
		        $linenum, $gc_log_filename, $line;
		}
		++$num_mem_increase_warnings;
	    }
	    $total_mem_collected_kb += $mem_collected_this_gc_kb;
	    $total_gc_time_sec += ($gc_time_msec / 1000.0);
	    if ($total_avail_space_kb > $max_total_avail_mem_kb) {
		$max_total_avail_mem_kb = $total_avail_space_kb;
	    }
	    if ($live_before_this_gc_kb > $max_total_allocated_mem_kb) {
		$max_total_allocated_mem_kb = $live_before_this_gc_kb;
	    }
	    if ($live_after_this_gc_kb > $max_total_live_mem_kb) {
		$max_total_live_mem_kb = $live_after_this_gc_kb;
	    }

	    # Do consistency check on ($gc_end_time_sec -
	    # $gc_start_time_sec), which I think should be close to
	    # $gc_time_sec.
	    my $double_check_gc_time_sec =
		($gc_end_time_sec - $gc_start_time_sec);
	    my $max_error_allowed_sec = 0.0015;
	    if (abs($double_check_gc_time_sec - $gc_time_sec) >
		$max_error_allowed_sec)
	    {
		if ($verbose || ($num_start_end_time_warnings <
				 $max_start_end_time_warnings_to_print))
		{
		    printf STDERR "Warning: GC <start> time %s and <end> time %s give duration %.3f which is %s different than the reported <time> %s in line %d of GC log file '%s': %s\n",
		        $gc_start_time_sec, $gc_end_time_sec,
		        $double_check_gc_time_sec,
		        abs($double_check_gc_time_sec - $gc_time_sec),
		        $gc_time_sec,
		        $linenum, $gc_log_filename, $line;
		}
		++$num_start_end_time_warnings;
	    }

	    # Do consistency check between values of $gc_time_sec and
	    # $gc_time_msec.  $gc_time_sec should be equal to
	    # $gc_time_msec, perhaps rounded off.
	    $double_check_gc_time_sec = ($gc_time_msec / 1000.0);
	    # I don't know why, but I've seen these values differ by
	    # more than merely rounding error.  For example, in this line:
	    #
	    # [INFO ][memory ] [OC#4] 9.586-10.564: OC 284932KB->273009KB (489092KB), 0.977 s, sum of pauses 964.737 ms, longest pause 964.737 ms.
	    $max_error_allowed_sec = 0.020;
	    if (abs($double_check_gc_time_sec - $gc_time_sec) >
		$max_error_allowed_sec)
	    {
		if ($verbose || ($num_pause_time_warnings <
				 $max_pause_time_warnings_to_print))
		{
		    printf STDERR "Warning: GC <pause> time = %s msec is %s msec different than <time> = %s sec in line %d of GC log file '%s': %s\n",
		        $gc_time_msec,
		        abs($double_check_gc_time_sec - $gc_time_sec) * 1000.0,
		        $gc_time_sec, $linenum, $gc_log_filename, $line;
		}
		++$num_pause_time_warnings;
	    }

	    # Do consistency check between values of
	    # $gc_longest_pause_time_msec and $gc_time_msec.  I
	    # believe the former should always be at most the latter.
	    if ($gc_longest_pause_time_msec > $gc_time_msec) {
		if ($verbose || ($num_longest_pause_time_warnings <
				 $max_longest_pause_time_warnings_to_print))
		{
		    printf STDERR "Warning: <longest_pause> = %s msec is longer than <pause> time = %s msec in line %d of GC log file '%s': %s\n",
		    $gc_longest_pause_time_msec, $gc_time_msec,
		    $linenum, $gc_log_filename, $line;
		}
		++$num_longest_pause_time_warnings;
	    }
	} elsif ($line =~ /^\s*\d+\.\d+:\s+\[GC, (\S+) secs\]\s*$/) {
	    # I have seen the version of the JVM described below
	    # produce a line in its GC log file very occasionally, as
	    # in once in _several_ runs of a program that printed 6600
	    # lines of output to its GC log file.  I am going to
	    # assume that it means that the time taken for this
	    # particular GC is the value given after the "GC,", but I
	    # won't update any of the memory statistics when reading
	    # such a line.

	    # % uname -a
	    # Linux ubuntu 2.6.32-25-generic #45-Ubuntu SMP Sat Oct 16 19:48:22 UTC 2010 i686 GNU/Linux
	    # % java -server -version
	    # java version "1.6.0_22"
	    # Java(TM) SE Runtime Environment (build 1.6.0_22-b04)
	    # Java HotSpot(TM) Server VM (build 17.1-b03, mixed mode)
	    my $gc_time = $1;
	    ++$num_gcs;
	    $total_gc_time_sec += $gc_time;
	} elsif (
            ($line =~ /^\s*\[INFO \]\[memory \] GC mode: Garbage collection optimized for .+, strategy: .+\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] Heap size: \d+KB, maximal heap size: \d+KB, nursery size: \d+KB\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <start>-<end>: <type> <before>KB-><after>KB \(<heap>KB\), <time> ms, sum of pauses <pause> ms\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <start>  - start time of collection \(seconds since jvm start\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <type>   - OC \(old collection\) or YC \(young collection\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <end>    - end time of collection \(seconds since jvm start\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <before> - memory used by objects before collection \(KB\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <after>  - memory used by objects after collection \(KB\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <heap>   - size of heap after collection \(KB\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <time>   - total time of collection \(milliseconds\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] <pause>  - total sum of pauses during collection \(milliseconds\)\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \]            Run with -Xverbose:gcpause to see individual phases\.\s*$/) ||
            ($line =~ /^\s*\[INFO \]\[memory \] Running on hypervisor Unknown \(but probably running on a hypervisor\)\s*$/)
	    )
	{
	    # Ignore these boilerplate header lines out of the JRockit JVM
	} elsif ($line =~ /^\s*\[ERROR\].*$/) {
	    my $err_msg = sprintf "Error: Found ERROR at line %d of GC log file '%s': %s",
	        $linenum, $gc_log_filename, $line;
	    if (! $already_saved_copy_of_gc_log) {
		$parse_gc_log_fail_info = $err_msg;
		$already_saved_copy_of_gc_log = 1;
	    }
	    if ($verbose || ($num_error_lines < $max_error_lines_to_print)) {
		printf STDERR "%s\n", $err_msg;
	    }
	    ++$num_error_lines;
	} else {
	    my $err_msg =
		sprintf "Could not parse line %d of GC log file %s: '%s'",
	            $linenum, $gc_log_filename, $line;
	    if (! $already_saved_copy_of_gc_log) {
		$parse_gc_log_fail_info = $err_msg;
		$already_saved_copy_of_gc_log = 1;
	    }
	    if ($verbose || ($num_unparseable_lines <
			     $max_unparseable_lines_to_print))
	    {
		printf STDERR "%s\n", $err_msg;
	    }
	    ++$num_unparseable_lines;
	}
    }
    close(FH);

    if (!$verbose) {
	if ($num_error_lines > $max_error_lines_to_print) {
	    printf STDERR "%d additional error messages suppressed about [ERROR] lines.  Use --verbose to see them all\n",
	        ($num_unparseable_lines - $max_unparseable_lines_to_print);
	}
	if ($num_unparseable_lines > $max_unparseable_lines_to_print) {
	    printf STDERR "%d additional error messages suppressed about unparseable GC log file lines.  Use --verbose to see them all\n",
	        ($num_unparseable_lines - $max_unparseable_lines_to_print);
	}
	if ($num_mem_increase_warnings > $max_mem_increase_warnings_to_print) {
	    printf STDERR "%d additional warnings suppressed about memory use increasing during GC.  Use --verbose to see them all\n",
	        ($num_mem_increase_warnings -
		 $max_mem_increase_warnings_to_print);
	}
	if ($num_start_end_time_warnings >
	    $max_start_end_time_warnings_to_print)
	{
	    printf STDERR "%d additional warnings suppressed about <end>-<start> time is significantly different than <time>.  Use --verbose to see them all\n",
	        ($num_start_end_time_warnings -
	         $max_start_end_time_warnings_to_print);
	}
	if ($num_pause_time_warnings > $max_pause_time_warnings_to_print) {
	    printf STDERR "%d additional warnings suppressed about <pause> time is significantly different than <time>.  Use --verbose to see them all\n",
	        ($num_pause_time_warnings -
		 $max_pause_time_warnings_to_print);
	}
	if ($num_longest_pause_time_warnings >
	    $max_longest_pause_time_warnings_to_print)
	{
	    printf STDERR "%d additional warnings suppressed about <longest_pause> time is longer than <pause> time.  Use --verbose to see them all\n",
	        ($num_longest_pause_time_warnings -
		 $max_longest_pause_time_warnings_to_print);
	}
    }

    my $num_errors = ($num_error_lines +
		      $num_unparseable_lines);
    my $num_warnings = ($num_mem_increase_warnings +
			$num_start_end_time_warnings +
			$num_pause_time_warnings +
			$num_longest_pause_time_warnings);
    my $gc_stats = {
	num_gcs => $num_gcs,
	total_mem_collected_kb => $total_mem_collected_kb,
	total_gc_time_sec => $total_gc_time_sec,
	max_total_avail_mem_kb => $max_total_avail_mem_kb,
	max_total_allocated_mem_kb => $max_total_allocated_mem_kb,
	max_total_live_mem_kb => $max_total_live_mem_kb,
	num_errors => $num_errors,
	num_warnings => $num_warnings
    };
    if (defined($parse_gc_log_fail_info)) {
	$gc_stats->{parse_gc_log_fail_info} = $parse_gc_log_fail_info;
    }
    return $gc_stats;
}


sub libxml_add_children_to_elem {
    my $xmldoc = shift;
    my $elem = shift;
    my $tag_text_pairs = shift;

    my $n = $#{$tag_text_pairs};
    my $i;
    for ($i = 0; $i < $n; $i += 2) {
	my $tag_str = $tag_text_pairs->[$i];
	my $text_str = $tag_text_pairs->[$i+1];
	my $child = $xmldoc->createElement($tag_str);
	my $text = XML::LibXML::Text->new($text_str);
	$child->appendChild($text);
	$elem->appendChild($child);
    }
}
