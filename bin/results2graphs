#! /usr/bin/env clj
;; -*- mode: Clojure -*-

(ns results2graphs.core
  (:require [clojure.xml :as xml]
            [clojure.repl :as repl]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [clojure.java.shell :as sh]
            ;;[clojure.tools.cli :as cli]
            [clojure.pprint :as p]))


(defn- temporary-file-name []
  (let [temp (java.io.File/createTempFile "clojure-benchmarks"
                                          (str (System/nanoTime)))]
    (assert (.delete temp))
    temp))


(def ^:dynamic *auto-flush* true)

(defn printf-to-writer [w fmt-str & args]
  (binding [*out* w]
    (apply clojure.core/printf fmt-str args)
    (when *auto-flush* (flush))))

(defn iprintf [fmt-str-or-writer & args]
  (if (instance? CharSequence fmt-str-or-writer)
    (apply printf-to-writer *out* fmt-str-or-writer args)
    (apply printf-to-writer fmt-str-or-writer args)))

(defn die [fmt-str & args]
  (apply iprintf *err* fmt-str args)
  (System/exit 1))

(defn basename
  "If the string contains one or more / characters, return the part of
  the string after the last /.  If it contains no / characters, return
  the entire string."
  [s]
  (if-let [[_ base] (re-matches #".*/([^/]+)" s)]
    base
    s))


(defn validate-parsed-xml
  "Verify that the XML file has the basic structure of a
  MeasurementList tag, with a content that is a sequence of
  Measurement tags."
  [parsed-xml]
  (and (= (:tag parsed-xml) :MeasurementList)
       (every? (fn [x] (= (:tag x) :Measurement))
               (:content parsed-xml))))


(defn validated-xml-to-xrel
  "For a parsed XML file that has the basic structure validated by
  validate-parsed-xml, create a sequence of maps with one map per
  measurement.  Each map has keys equal to the keywords of the tags in
  the measurement, and values equal to the contents of each tag in the
  measurement.  Some tags have their contents converted to bigints or
  doubles."
  [validated-xml]
  (for [measurement (:content validated-xml)]
    (into {}
          (for [measurement-detail (:content measurement)]
            (let [tag (:tag measurement-detail)
                  str-val (or (first (:content measurement-detail)) "")
                  exp-format (case tag
                               (:number_of_cpu_cores
                                :exit_status
                                :maximum_resident_set_size_kibibytes)
                               :int
                               
                               (:elapsed_time_sec
                                :user_cpu_time_sec
                                :system_cpu_time_sec)
                               :double
                               
                               :string)
                  val (case exp-format
                        :int (bigint str-val)
                        :double (Double/parseDouble str-val)
                        :string str-val)]
              [tag val])))))


(defn add-columns-problem-platform-language [data]
  (for [{:keys [current_working_directory output_file jvm_os_name
                jvm_os_version jvm_java_version jvm_sun_arch_data_model]
         :as measurement} data]
    (let [problem (basename current_working_directory)
          lang (if-let [[_ size lang]
                        (re-matches #".*output/([^-]+)-(\S+)-output.txt"
                                    output_file)]
                 lang
                 nil)
          lang (if (or (= lang "java")
                       (re-find #"(alpha|beta)" lang))
                 lang
                 ;; Append "-final" to the Clojure version number so
                 ;; that it sorts alphabetically after the alpha and
                 ;; beta versions.
                 (str lang "-final"))

          platform (format "%s %s + JDK %s, %s-bit"
                           jvm_os_name jvm_os_version
                           jvm_java_version jvm_sun_arch_data_model)]
      (assoc measurement :problem problem
             :language lang
             :platform platform))))


(defn fastest-good-run [[problem-platform-lang measurements]]
  (let [num-runs (count measurements)
        good-runs (filter #(zero? (:exit_status %)) measurements)
        num-good-runs (count good-runs)]
    (if (zero? num-good-runs)
      (assoc problem-platform-lang :num_runs num-runs
             :good_runs 0 :elapsed_time_sec -1)
      (let [fastest-run (apply min-key :elapsed_time_sec good-runs)
            elapsed-times (sort (map :elapsed_time_sec good-runs))
            max-over-min (/ (apply max elapsed-times)
                            (apply min elapsed-times))
            ;; Round max-over-min to fewer digits
            max-over-min (format "%.2f" max-over-min)]
        (assoc fastest-run :num_runs num-runs
               :good_runs num-good-runs
               :other_elapsed_time_sec elapsed-times
               :time_var max-over-min)))))


(defn compare-by-problem-platform-language-time [meas1 meas2]
  (let [x (compare (:problem meas1) (:problem meas2))]
    (if (not= x 0)
      x
      (let [x (compare (:platform meas1) (:platform meas2))]
        (if (not= x 0)
          x
          (let [x (compare (:language meas1) (:language meas2))]
            (if (not= x 0)
              x
              (compare (:elapsed_time_sec meas1) (:elapsed_time_sec meas2)))))))))


(defn validated-xrel-from-file [xml-filename prog-name]
  (let [p (try
            (xml/parse xml-filename)
            (catch Exception e
              (iprintf *err* "%s: clojure.xml/parse got exception while attempting
to read file '%s'\n"
                       prog-name xml-filename)
              (repl/pst e)
              (die "Aborting.\n")))]
    (when-not (validate-parsed-xml p)
      (die "%s: XML file %s must be a MeasurementList
consisting of one or more Measurement elements\n"
           prog-name xml-filename))
    ;; p is output of xml/parse.
    ;; validated-xml-to-xrel produces a sequence of maps, each map
    ;; containing details of one measurement.
    (validated-xml-to-xrel p)))


(def prog-name (basename *file*))


;; I'm not using clojure.tools.cli for option parsing due to the extra
;; dependency, but I created this before I knew it would require the
;; extra dependency.
;;(def options-spec
;;  [ ["-t" "--show-table" "Show table of results"]
;;    ["-a" "--show-all-times" "In table, show all run times"]
;;    ["-l" "--show-platform" "In table, show platform"]
;;    ["-p" "--[no]-plots" :default true] ])


(defn show-usage [prog-name options-desc]
  (die "usage: %s [ <opions> ] <results.xml> ...
%s
    -t Show a table of all results extracted from the XML files.
       Without this option, no such table is shown.

    -a Only useful if -t is specified.  If both -t and -a are given,
       then in the table of results displayed, there will be a column
       to show not only the fastest elapsed time for each
       problem/platform/language combo, but also a list of all elapsed
       times sorted in increasing order.

    -l Like -a, except adds a 'platform' column to the table.

    -p By default, use gnuplot to generate PNG format plots for each
       problem.  With this option, skip the generation of plots.
" prog-name options-desc))


(defn parse-opts [args]
  (loop [args args
         opts {:show-table false
               :show-all-times false
               :show-platform false
               :plots true}]
    (if-let [arg (first args)]
      (if-let [opt (case arg
                     "-t" {:show-table true}
                     "-a" {:show-all-times true}
                     "-l" {:show-platform true}
                     "-p" {:plots false}
                     nil)]
        (recur (rest args) (merge opts opt))
        [opts args ""])
      [opts args ""])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start of 'main' code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(let [[opts filenames options-desc] (parse-opts *command-line-args*)]
  (when (zero? (count filenames))
    (show-usage prog-name options-desc))

  (doseq [fname filenames]
    (when-not (.exists (io/file fname))
      (die "%s: No such file '%s'\n" prog-name fname)))

  (let [data-xrel (mapcat #(validated-xrel-from-file % prog-name) filenames)
        data (->> data-xrel
                  add-columns-problem-platform-language
                  
                  ;; If there are multiple measurements for the same
                  ;; problem and language/Clojure version, group them
                  ;; together for later processing.
                  (group-by #(select-keys % [:problem :platform :language]))
                  
                  ;; Now that they are grouped, remove any in the
                  ;; group that failed (i.e. :exit_status is non-0).
                  ;; Among those that succeeded, if any, keep the one
                  ;; with the smallest elapsed time.
                  (map fastest-good-run)

                  ;; Remove any older runs for Clojure versions that
                  ;; are too similar to other versions.
                  (remove (fn [meas]
                            (#{"clj-1.4-alpha5" "clj-1.4-beta3"
                               "clj-1.4-beta5" "clj-1.4-beta7"
                               "clj-1.5-alpha6" "clj-1.5-alpha7"}
                             (:language meas))))
                  
                  ;; For purposes of printing as a table, sort them by
                  ;; problem, and within each problem by platform, and
                  ;; within that by language.
                  (sort compare-by-problem-platform-language-time))]
  
    ;; debug output
    (when (:show-table opts)
      (let [columns (concat [:problem]
                            (if (:show-platform opts)
                              [:platform]
                              [])
                            [:language :elapsed_time_sec :time_var]
                            (if (:show-all-times opts)
                              [:other_elapsed_time_sec]
                              [])
                            [:good_runs])]
        (p/print-table columns data)))

    (when (:plots opts)
      (doseq [[problem problem-measurements] (group-by :problem data)]
        
        ;; For each problem, create one chart with Clojure version on
        ;; the X axis, and run time on the Y axis.  There should be a
        ;; separate "curve" for each platform.
        
        ;; language->idx helps us correctly draw plots in the case
        ;; where some platforms have results for languages where other
        ;; platforms do not.  First create union of all language
        ;; results we have, sort them by name, and assign them a
        ;; numeric index in that order.
        (let [language->idx (->> (map :language problem-measurements)
                                set
                                sort
                                (map-indexed (fn [idx lang] [lang idx]))
                                (into {}))
              tempfiles
              (for [[plat plat-measurements] (group-by :platform
                                                       problem-measurements)]
                (let [graph-one-curve-data
                      (map (fn [meas]
                             [(get language->idx (:language meas))
                              (:language meas)
                              (:elapsed_time_sec meas)])
                           plat-measurements)
                      tempfile (temporary-file-name)]
                  (spit tempfile (str/join "\n" (map #(str/join " " %) 
                                                     graph-one-curve-data)))
                  [plat tempfile]))
              
              outfile (io/file "." (str problem ".png"))
              title problem
              ylabel "secs"
              plot-min 0.0
              ;; It seems that plot-max "" causes gnuplot to
              ;; automatically scale the Y axis for the longest run
              ;; time.
              plot-max ""
              plotrange (str "[][" plot-min ":" plot-max "]")
            
              plotlines
              (for [[platform tempfile] tempfiles]
                (str "\"" tempfile "\""
                     " using 1:3:xtic(2) title '" platform "'"
                     " with linespoints"))
              
              plotline (str "plot " plotrange (str/join ", " plotlines) "\n")
              command (str
                       "set title '" title "'\n"
                       "set terminal png size 800,600\n"
                       "set lmargin 8\n"
                       "set bmargin 7\n"
                       "set key outside\n"
                       "set key center top\n"
                       "set grid\n"
                       "set xtics border in rotate by -90 offset character 0, -0.5, 0\n"
                       "set ylabel \"" ylabel "\"\n"
                       "set output \"" outfile "\"\n"
                       plotline)
              
              notes (sh/sh "gnuplot" :in command)
              err (str/trim-newline (:err notes))]
          
          (when-not (empty? err)
            (iprintf *err* "while generating plot " title "\n" err))
          
          ;; debug output
;;          (doseq [[plat temp-file-name] tempfiles]
;;            (iprintf "problem %s platform %s temp-file-name %s\n"
;;                     problem plat temp-file-name))

          )))))

(shutdown-agents)
(iprintf "Done.\n")
