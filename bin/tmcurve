: # use perl -*-Perl-*-
eval 'exec perl -S "$0" ${1+"$@"}'
    if 0;
# -*cperl-*-

use strict;
use Getopt::Long;
use File::Basename;
# File::Temp is a library for creating temporary files.
use File::Temp qw/ tempfile tempdir /;
# FindBin is a library to find the directory in which the script is
# installed.  This can be useful for making it easy to install other
# auxiliary files needed by the script all in one place, and no matter
# where someone installs 'the whole package' of files, the script can
# find them, without needing hand-editing.
use FindBin;
use XML::LibXML;
use POSIX qw(ceil);


my $verbose = 0;
my $full_progname = $0;
my $progname = fileparse($full_progname);

my $os = `uname -o 2>/dev/null`;
if ($? != 0) {
    # Then likely we are running on a Mac OS X system with the default
    # uname installation, which accepts -s but not -o option.
    $os = `uname -s 2>/dev/null`;
}
chomp $os;

my $install_dir = $FindBin::Bin;
my $measureproc_cmd = $install_dir . "/measureproc";
if (! -x $measureproc_cmd) {
    printf STDERR
"Expected to find measureproc command at the following path, but it is
either not there, or not executable:
    $measureproc_cmd
";
    exit 1;
}

my $starting_mb = 128;
my $min_mb_ever_to_use = 4;
# 2048 is too large for 32-bit JRockit on Windows
my $max_mb_ever_to_use = 2048 - 4;
my $precision_mb = 4;
my $repeat_count = 4;
my $num_mb_values = 5;
my $check_output_cmd = undef;


sub usage {
    print STDERR
"usage: $progname [ --help ] [ --verbose ]
               [ --sorted-summary ]
               [ --results-file <results_file> ]
               [ --binary-search-only ]
               [ --sweep-only ]
               [ --start <starting_mb> ]  (default $starting_mb)
               [ --min <min_mb> ]  (default $min_mb_ever_to_use)
               [ --max <max_mb> ]  (default $max_mb_ever_to_use)
               [ --precision <precision_mb> ]  (default $precision_mb)
               [ --repeat-count <repeat_count> ]   (default $repeat_count)
               [ --num-mb-values <num_mb_values> ] (default $num_mb_values)
               [ --delta <delta_mb> ]  (no default)
               [ --alpha <alpha> ]     (no default)

                 These options are passed on to measureproc
                 unmodified, and have the same meaning as documented
                 there:
                 [ --input-file <input_file> ]
                 [ --output-file <output_file> ]
                 [ --check-output-cmd <check_output_cmd> ]
                 [ --os <os_name> ]
                 [ --time-cmd <time_cmd> ]
                 [ --jvm-gc-stats <jvm_type> ]
                 [ --jruby-gc-stats <jvm_type> ]
                 [ --language <language_implementation_description_string> ]
                 [ --benchmark <benchmark_problem_name> ]
                 [ --source-file-name <source_file_name> ]

               <measured_cmd> [ args, with %mb where MB value should go ... ]

The purpose of $progname is to:

    (1) Binary search phase: Determine the smallest memory required
        for <measured_cmd> to run, within a configurable precision.
        It uses binary search to find this value.

    (2) Sweep phase: Once this minimum required memory is determined,
        run the command repeatedly with that memory limit.  Then run
        it with larger memory limits, to see if the program gets
        significantly faster when permitted more memory.  For example,
        a larger memory limit might make the program execute faster if
        it leads to fewer and faster garbage collections.  (Note that
        this is not _automatically_ true in all cases -- it depends
        upon the details of the garbage collection method in use and
        the pattern of memory allocation in the application.)

The <measured_cmd> [ args ... ] is a command that will be executed
with the arguments that you specify, except that somewhere in those
arguments should be one or more occurrences of the string %mb.  When
<measured_cmd> is invoked, all occurrences of %mb are replaced with
the number of megabytes.  For example:

    java -server -Xmx%mb -cp \$HOME/.clojure/clojure-1.2.0.jar:. nbody

The number represents the amount of memory the command should use.
$progname does not enforce this memory limit.  The command should do
so itself based upon the value of %mb given in the command line.

$progname repeatedly executes <measured_cmd> with different values for
%mb, trying to find the smallest value where it succeeds.  It uses
binary search to find the smallest such value, to within an accuracy
of <precision_mb> (default value $precision_mb).

Success is determined by running the command <check_output_cmd>.  This
command should read the output file specified by --output-file, and
have an exit status of 0 if that file is good, otherwise it should
have a non-0 exit status.

    --binary-search-only
        Do only the binary search phase (1), leaving out (2).
        Relevant parameters that control this phase are:

          --start <starting_mb>  (default $starting_mb)
          --min <min_mb>  (default $min_mb_ever_to_use)
          --max <max_mb>  (default $max_mb_ever_to_use)
          --precision <precision_mb> (default $precision_mb)

    --sweep-only
        Do only the 'sweep' phase (2), leaving out the binary search
        (1).  Relevant parameters that control this phase are:

          --start <starting_mb>  (default $starting_mb)
          --repeat-count <repeat_count>   (default $repeat_count)
          --num-mb-values <num_mb_values> (default $num_mb_values)

          Exactly one of --delta and --alpha must be specified if the
          sweep phase is performed.  If --delta <delta_mb> is given,
          then the program will be run with MB values of S, S+D,
          S+2*D, etc. where S is <starting_mb> and D is <delta_mb>.

          If instead --alpha <alpha> is given, then the program will
          be run with MB values of S, S*A, S*A^2, S*A^3, etc. where A
          is <alpha>.  Each value will be made at least 1 MB larger
          than the one before, if it is not already, so the program is
          guaranteed to be run with different MB values.

          Whether --delta or --alpha is used, the program will be run
          with <num_mb_values> different values of MB, unless the
          increasing values would go over <max_mb>, in which case
          fewer than <num_mb_values> different MB values will be used.
          The program will be run <repeat_count> times for each MB
          value used, to learn whether there is much variation in the
          time or memory used from one run to the next.

If neither --binary-search-only nor --sweep-only options are
specified, $progname will do both the binary search and sweep phases,
each controlled by the relevant parameters.  The only exception is
that the first MB value used for the sweep phase will not be
<starting_mb>, but the smallest MB value found in the binary search
phase for which the program produced correct output.

TBD: Document all arguments that are not also arguments to
measureproc.

    --sorted-summary
    --results-file <results_file>
";
}

my $help = 0;
my $sorted_summary = 0;
my $results_file;
my $binary_search_only;
my $sweep_only;
my $delta_mb;
my $alpha;
my $input_file;
my $output_file;
my $check_output_cmd;
my $os_from_cmd_line;
my $time_cmd_from_cmd_line;
my $jvm_gc_stats_from_cmd_line;
my $jruby_gc_stats_from_cmd_line;
my $language_implementation_desc_str;
my $benchmark_name;
my $source_file_name;
my $stop_after_arg_processing;
Getopt::Long::Configure('require_order');
if (!GetOptions('help' => \$help,
		'verbose+' => \$verbose,
                'sorted-summary' => \$sorted_summary,
                'results-file=s' => \$results_file,
                'binary-search-only' => \$binary_search_only,
                'sweep-only' => \$sweep_only,
                'start=i' => \$starting_mb,
                'min=i' => \$min_mb_ever_to_use,
                'max=i' => \$max_mb_ever_to_use,
                'precision=i' => \$precision_mb,
                'repeat-count=i' => \$repeat_count,
                'num-mb-values=i' => \$num_mb_values,
                'delta=i' => \$delta_mb,
                'alpha=f' => \$alpha,

		# These are the options passed on to measureproc
		'input-file=s' => \$input_file,
		'output-file=s' => \$output_file,
		'check-output-cmd=s' => \$check_output_cmd,
		'os=s' => \$os_from_cmd_line,
		'time-cmd=s' => \$time_cmd_from_cmd_line,
                'jvm-gc-stats=s' => \$jvm_gc_stats_from_cmd_line,
                'jruby-gc-stats=s' => \$jruby_gc_stats_from_cmd_line,
		'language=s' => \$language_implementation_desc_str,
		'benchmark=s' => \$benchmark_name,
		'source-file-name=s' => \$source_file_name,

		# Undocumented option strictly for developer testing
		# of the argument processing itself.
		'stop-after-arg-processing' => \$stop_after_arg_processing
               ))
{
    usage();
    exit 1;
}
if ($help) {
    usage();
    exit 0;
}

if ($binary_search_only && $sweep_only) {
    printf STDERR
"$progname: You must not specify both of --binary-search-only and
--sweep-only.  At most one of those two may be used.
";
    exit 1;
}

my $do_binary_search_phase = 1;
my $do_sweep_phase = 1;
if ($binary_search_only) {
    $do_sweep_phase = 0;
}
if ($sweep_only) {
    $do_binary_search_phase = 0;
}

if (defined($binary_search_only) || exactly_one_defined([ $delta_mb, $alpha ]))
{
    # Good
} else {
    printf STDERR
"$progname: If you do not specify --binary-search-only, then exactly
one of <delta_mb> and <alpha> must specified.
";
    exit 1;
}
if ( (1 <= $min_mb_ever_to_use) &&
     ($min_mb_ever_to_use <= $starting_mb) &&
     ($starting_mb <= $max_mb_ever_to_use) &&
     ($precision_mb >= 1) &&
     ($repeat_count >= 1) &&
     ($num_mb_values >= 1) &&
     (!defined($delta_mb) || ($delta_mb >= 1)) &&
     (!defined($alpha) || ($alpha > 1.0))
    )
{
    # Good
} else {
    printf STDERR
"$progname: The arguments must satisfy these conditions:
    1  <=  <min_mb>  <=  <starting_mb>  <=  <max_mb>
    <precision_mb>  >=  1
    <repeat_count>  >=  1
    <num_mb_values>  >=  1
    <delta_mb>  >=  1   (if --delta_mb specified)
    <alpha>  >  1.0     (if --alpha specified)

You have violated one or more of these conditions.
";
    exit 1;
}

if ($do_binary_search_phase) {
    # We will be doing binary search, so we need to have an
    # <output_file> and a <check_output_cmd> to verify whether the
    # command is working.
    if (defined($check_output_cmd) && defined($output_file)) {
	# Good
    } else {
	printf STDERR
"$progname: You must specify an output file and a command to check it,
or else the binary search will have no way to verify whether the
command is successful.
";
	exit 1;
    }
} else {
    # Then those arguments need not be specified if the user does not
    # want to.  tmcurve won't be checking the output.
}

if (defined($input_file)) {
    if ($os eq 'Cygwin' && -l $input_file) {
	printf STDERR
"$progname: On Cygwin, $progname uses a DOS/Windows batch file to run
the command and collect cpu and memory usage.  When redirecting input
from a file, this fails if the input file is a Cygwin symbolic link.

$input_file is a Cygwin symbolic link.  Try copying the file to where
the symbolic link is, or use the file name of the original file.
";
	exit 1;
    }
    if (! -r $input_file) {
	my $msg = 'that file is not readable';
	if (! -x $input_file) {
	    $msg = 'no such file exists';
	}
	printf STDERR
"$progname: You specified an input file '%s', but %s
",
            $input_file, $msg;
	exit 1;
    }
}

my $nargs = 1 + $#ARGV;
if ($nargs < 1) {
    printf STDERR
"$progname: You must specify a command to be run.
";
    exit 1;
}

if ($stop_after_arg_processing) {
    if ($do_sweep_phase) {
	my $mb = $starting_mb;
	my $mb_vals = sweep_phase_mb_values($mb, $delta_mb, $alpha,
					    $num_mb_values,
					    $max_mb_ever_to_use);
	printf "sweep phase MB values to use: %s\n", join(' ', @{$mb_vals});
    }
    printf "\$do_binary_search_phase=%s \$do_sweep_phase=%s\n",
        $do_binary_search_phase, $do_sweep_phase;
    printf STDERR "andy-debug: Stopping early after argument processing.\n";
    exit 2;
}

my $tempdir = tempdir( CLEANUP => 1 );


my $summaries_to_sort = {};
my $mb = $starting_mb;

if ($do_binary_search_phase) {
    my $largest_fail_mb;
    my $smallest_success_mb;

    printf "Looking for smallest memory size that succeeds.\n" if ($verbose >= 1);
    my ($success, $measurement_xml_info) = cmd_succeeds($mb);
    print_status($mb, $success, $measurement_xml_info);
    my $do_range_narrowing = 1;
    if ($success) {
	# Then look for smaller memory limit that fails.
	$smallest_success_mb = $mb;
	while ($mb > $min_mb_ever_to_use) {
	    $mb = $mb / 2;
	    if ($mb < $min_mb_ever_to_use) {
		$mb = $min_mb_ever_to_use;
	    }
	    my ($success, $measurement_xml_info) = cmd_succeeds($mb);
	    print_status($mb, $success, $measurement_xml_info);
	    if ($success) {
		$smallest_success_mb = $mb;
		# Keep going
	    } else {
		# Found it.
		$largest_fail_mb = $mb;
		last;
	    }
	}
	if (!defined($largest_fail_mb)) {
	    printf "Tried down to %d MB and all tests succeeded.\n",
	        $smallest_success_mb
		    if ($verbose >= 1);
	    $do_range_narrowing = 0;
	}
    } else {
	# Then look for larger memory limit that succeeds.
	$largest_fail_mb = $mb;
	while ($mb < $max_mb_ever_to_use) {
	    $mb = $mb * 2;
	    if ($mb > $max_mb_ever_to_use) {
		$mb = $max_mb_ever_to_use;
	    }
	    my ($success, $measurement_xml_info) = cmd_succeeds($mb);
	    print_status($mb, $success, $measurement_xml_info);
	    if ($success) {
		# Found it.
		$smallest_success_mb = $mb;
		last;
	    } else {
		$largest_fail_mb = $mb;
		# Keep going
	    }
	}
	if (!defined($smallest_success_mb)) {
	    printf "Tried up to %d MB but all tests failed.\n", $largest_fail_mb
		if ($verbose >= 1);
	    $do_range_narrowing = 0;
	}
    }
    
    if ($do_range_narrowing) {
	printf "Now perform binary search on range [%d,%d]\n",
            $largest_fail_mb, $smallest_success_mb
		if ($verbose >= 1);
	while ($smallest_success_mb - $largest_fail_mb > $precision_mb) {
	    $mb = ($largest_fail_mb + $smallest_success_mb) / 2;
	    my ($success, $measurement_xml_info) = cmd_succeeds($mb);
	    if ($success) {
		$smallest_success_mb = $mb;
	    } else {
		$largest_fail_mb = $mb;
	    }
	    my $extra_info =
		sprintf "new range [%d,%d]", $largest_fail_mb, $smallest_success_mb;
	    print_status($mb, $success, $measurement_xml_info, $extra_info);
	}
	printf "Succeeded at %d MB, failed at %d MB\n",
            $smallest_success_mb, $largest_fail_mb
		if ($verbose >= 1);
	$mb = $smallest_success_mb;
    }
}

if ($do_sweep_phase) {
    # Then do the sweep phase.  Create the list of MB values to use.
    my $mb_vals = sweep_phase_mb_values($mb, $delta_mb, $alpha, $num_mb_values,
					$max_mb_ever_to_use);
    printf "Sweep phase MB values to use: %s\n", join(' ', @{$mb_vals})
	if ($verbose >= 1);
    foreach $mb (@{$mb_vals}) {
	my $i;
	for ($i = 0; $i < $repeat_count; $i++) {
	    my ($success, $measurement_xml_info) = cmd_succeeds($mb);
	    # We don't care about whether we succeed or not here.
	    # Just run them regardless of the outcome, and save the
	    # results.
	    print_status($mb, $success, $measurement_xml_info);
	}
    }
}

if ($sorted_summary) {
    printf "\n";
    foreach $mb (sort { $a <=> $b } keys %{$summaries_to_sort}) {
	printf "%s", $summaries_to_sort->{$mb};
    }
}

exit 0;


sub success_str {
    my $success = shift;
    return ($success ? "succeed" : "fail");
}


sub cmd_words {
    my $mb = shift;
    
    # Replace %mb wherever it occurs in what is left of ARGV after
    # option processing above.

    # Make sure to make a copy of @ARGV so we don't clobber it.
    my @argv_copy = @ARGV;
    my $cmd_words = [];
    foreach my $cmd_word (@argv_copy) {
	$cmd_word =~ s/%mb/$mb/;
	push @{$cmd_words}, $cmd_word;
    }
    return $cmd_words;
}


sub run_measure_cmd {
    my $mb = shift;

    my $cmd_to_measure_words = cmd_words($mb);
    printf "Running command with mb=%d: '%s' ...\n",
        $mb, join(' ', @{$cmd_to_measure_words}) if ($verbose >= 2);

    # Note: We use --log-file option to record XML output in a temp
    # file, then read that file in.  This is slightly simpler than
    # reading measureproc's output here, although that is certainly
    # possible using something like open3 instead of system.  I don't
    # want to cause system() to invoke a shell for processing things
    # like > for redirecting stdout, since that might cause problems
    # with munging the arguments, depending upon what characters they
    # have in them.

    # Create args for measureproc command, including --xml

    my $args = [];
    push @{$args}, '--xml';
    my ($fh, $temp_log_filename) = tempfile( DIR => $tempdir );
    # Do I need to close this before opening the file for reading?  Or
    # could I simply use it to read the file from the beginning?
    # Seems safer to close this and open the file by name later.
    close $fh;
    push @{$args}, '--log-file', $temp_log_filename;
    if (defined($input_file)) {
	push @{$args}, '--input-file', $input_file;
    }
    if (defined($output_file)) {
	push @{$args}, '--output-file', $output_file;
    }
    if (defined($check_output_cmd)) {
	push @{$args}, '--check-output-cmd', $check_output_cmd;
    }
    if (defined($os_from_cmd_line)) {
	push @{$args}, '--os', $os_from_cmd_line;
    }
    if ($time_cmd_from_cmd_line) {
	push @{$args}, '--time-cmd', $time_cmd_from_cmd_line;
    }
    if ($jvm_gc_stats_from_cmd_line) {
	push @{$args}, '--jvm-gc-stats', $jvm_gc_stats_from_cmd_line;
    }
    if ($jruby_gc_stats_from_cmd_line) {
	push @{$args}, '--jruby-gc-stats', $jruby_gc_stats_from_cmd_line;
    }
    if ($language_implementation_desc_str) {
	push @{$args}, '--language', $language_implementation_desc_str;
    }
    if ($benchmark_name) {
	push @{$args}, '--benchmark', $benchmark_name;
    }
    if ($source_file_name) {
	push @{$args}, '--source-file-name', $source_file_name;
    }

    # Append the words for the command to be measured.
    foreach my $cmd_word (@{$cmd_to_measure_words}) {
	push @{$args}, $cmd_word;
    }

    printf "    %s '%s'\n", $measureproc_cmd, join("' '", @{$args})
	if ($verbose >= 2);
    
    # Run measureproc
    my $exit_status = system $measureproc_cmd, @{$args};

    # At least for now, and perhaps always, ignore exit status of
    # measureproc.  It is really the exit status codes of the measured
    # command and the check output command that we care about.

    if (-r $temp_log_filename) {
	my $parser = XML::LibXML->new();
	my $tree = $parser->parse_file($temp_log_filename);
	my $root = $tree->getDocumentElement;
	my $all_measurements = $root->findnodes('Measurement');
	# There should only be one element in that list.
	my $measurement_xml_info = $all_measurements->[0];

	my $overall_success;
	my $measured_cmd_success;
	my $measured_cmd_exit_status =
	    $measurement_xml_info->findvalue('exit_status');
	printf "    exit_status=%s", $measured_cmd_exit_status
	    if ($verbose >= 2);
	$measured_cmd_success = (defined($measured_cmd_exit_status) &&
				 ($measured_cmd_exit_status == 0)) ? 1 : 0;
	if (defined($check_output_cmd)) {
	    my $check_output_cmd_success;
	    my $exit_status_of_check_cmd =
		$measurement_xml_info->findvalue('exit_status_of_check_cmd');
	    printf " exit_status_of_check_cmd=%s", $exit_status_of_check_cmd
		if ($verbose >= 2);
	    $check_output_cmd_success = (defined($exit_status_of_check_cmd) &&
					 ($exit_status_of_check_cmd == 0)) ? 1 : 0;
	    $overall_success =
		($measured_cmd_success && $check_output_cmd_success) ? 1 : 0;
	} else {
	    $overall_success = $measured_cmd_success;
	}
	printf " overall_success=%d\n", $overall_success if ($verbose >= 2);
	return ($overall_success, $measurement_xml_info);
    } else {
	printf "Temporary log file '%s' created for measureproc was not created.  Assume failure." if ($verbose >= 1);
	return (0, undef);
    }
}


sub cmd_succeeds {
    my $mb = shift;

    my ($success, $measurement_xml_info) = run_measure_cmd($mb);
    if (defined($measurement_xml_info)) {
	# Add $measurement_xml_info info to a log file that holds all
	# measurement data.
	my $tree;
	my $root;
	if (-r $results_file) {
	    # Append the new results to the existing results file.
	    my $parser = XML::LibXML->new();
	    $tree = $parser->parse_file($results_file);
	    $root = $tree->getDocumentElement;
	} else {
	    # Create a new XML file with the current results.
	    $tree = XML::LibXML::Document->new();
	    $root = $tree->createElement('MeasurementList');
	    $tree->setDocumentElement($root);
	}
	# Add a separate field to $measurement_xml_info to record the
	# value of $mb.  Yes, it should be buried in the command line,
	# but having a separate field will make it easier to extract
	# and use later.
	my $new_elem = $tree->createElement('tmcurve_mb_argument');
	my $text = XML::LibXML::Text->new($mb);
	$new_elem->appendChild($text);
	$measurement_xml_info->appendChild($new_elem);

	$root->appendChild($measurement_xml_info);
	my $fh;
	open $fh, ">", $results_file;
	# TBD: Check for failure to open the file for writing.
	print $fh $tree->toString(1);
	close $fh;
    }
    return ($success, $measurement_xml_info);
}


sub print_status {
    my $mb = shift;
    my $success = shift;
    my $measurement_xml_info = shift;
    my $extra_stuff = shift;

    my $show_units = 1;
    my $mb_str = '';
    my $sec_str = '';
    if ($show_units) {
	$mb_str = ' MB';
	$sec_str = ' sec';
    }

    my $cpu_sec =
	$measurement_xml_info->findvalue('user_cpu_time_sec') +
	$measurement_xml_info->findvalue('system_cpu_time_sec');
    my $max_rss_kb = 
	$measurement_xml_info->findvalue('maximum_resident_set_size_kibibytes');
    my $max_rss_mb = max_rss_mb($max_rss_kb);

    my $num_gcs =
	$measurement_xml_info->findvalue('number_of_gcs');
    my $total_mem_collected =
	$measurement_xml_info->findvalue('total_memory_gced_kb');
    my $total_gc_time =
	$measurement_xml_info->findvalue('total_gc_time_sec');
    my $max_total_avail_mem =
	$measurement_xml_info->findvalue('maximum_total_available_memory_kb');
    my $max_total_allocated_mem =
	$measurement_xml_info->findvalue('maximum_total_allocated_memory_kb');
    my $max_total_live_mem =
	$measurement_xml_info->findvalue('maximum_total_live_memory_kb');

    my $line = sprintf "Max heap=%d%s", $mb, $mb_str;
    $line .= sprintf " %s", success_str($success);
    $line .= sprintf "  cpu=%s%s", $cpu_sec, $sec_str;
    $line .= sprintf "  Max RSS=%.1f%s", $max_rss_mb, $mb_str;
    $line .= sprintf "  RSS-heap=%.1f%s", $max_rss_mb - $mb, $mb_str;
    if (defined($jvm_gc_stats_from_cmd_line) ||
        defined($jruby_gc_stats_from_cmd_line))
    {
        $line .= sprintf "  GC num GCs=%d", $num_gcs;
        $line .= sprintf " GC tot space=%.1f%s", $total_mem_collected / 1024.0, $mb_str;
        $line .= sprintf " time=%.1f%s", $total_gc_time, $sec_str;
        if ($num_gcs == 0) {
	    $line .= sprintf " other GC stats N/A";
        } else {
	    $line .= sprintf " max live=%.1f%s", $max_total_live_mem / 1024.0, $mb_str;
	    $line .= sprintf " max alloc=%.1f%s", $max_total_allocated_mem / 1024.0, $mb_str;
        }
    }
    if (defined($extra_stuff)) {
	$line .= sprintf "  %s", $extra_stuff;
    }
    $line .= "\n";
    if ($verbose >= 1) {
	printf "%s", $line;
    }
    if (!defined($summaries_to_sort->{$mb})) {
	$summaries_to_sort->{$mb} = '';
    }
    $summaries_to_sort->{$mb} .= $line;
}


sub max_rss_mb {
    my $max_rss_kb = shift;

    return ($max_rss_kb / 1024.0);
}


sub exactly_one_defined {
    my $val_list = shift;

    my $at_least_one_defined = 0;
    foreach my $val (@{$val_list}) {
	if (defined($val)) {
	    if ($at_least_one_defined) {
		# More than one defined
		return 0;
	    } else {
		$at_least_one_defined = 1;
	    }
	}
    }
    return $at_least_one_defined;
}


sub sweep_phase_mb_values {
    my $mb = shift;
    my $delta = shift;
    my $alpha = shift;
    my $num_mb_values = shift;
    my $max_mb_ever_to_use = shift;

    my $i;
    my $mb_vals = [ ];
    if (defined($delta)) {
	my $x = $mb;
	for ($i = 0; $i < $num_mb_values; $i++) {
	    push @{$mb_vals}, $x;
	    if ($x < $max_mb_ever_to_use) {
		$x += $delta;
		if ($x > $max_mb_ever_to_use) {
		    $x = $max_mb_ever_to_use;
		}
	    } else {
		last;
	    }
	}
    } else {
	my $temp_list = [];
	my $x = $mb;
	# First, just generate the 'exact' floating point values, each
	# rounded up to the next whole number.
	for ($i = 0; $i < $num_mb_values; $i++) {
	    push @{$temp_list}, POSIX::ceil($x);
	    $x = $x * $alpha;
	}
	# Then "clean it up by making sure that they are all unique,
	# increase values to be one more than the value before if
	# needed to ensure that condition.
	$x = shift @{$temp_list};
	push @{$mb_vals}, $x;
	foreach my $next_x (@{$temp_list}) {
	    if ($next_x < ($x + 1)) {
		$next_x = $x + 1;
	    }
	    if ($next_x <= $max_mb_ever_to_use) {
		push @{$mb_vals}, $next_x;
	    } elsif ($max_mb_ever_to_use > $x) {
		push @{$mb_vals}, $max_mb_ever_to_use;
		last;
	    } else {
		last;
	    }
	    $x = $next_x;
	}
    }
    return $mb_vals;
}
