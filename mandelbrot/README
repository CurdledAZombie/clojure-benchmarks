----------------------------------------------------------------------
Fastest Clojure mandelbrot programs on the Benchmarks Game web site as
of Sep 16 2012:

5 mandelbrot.clojure-5.clojure = mandelbrot.clj-9-seq.clj
6 mandelbrot.clojure-6.clojure = mandelbrot.clj-9-par-1.3.clj
2 mandelbrot.clojure-2.clojure
1 mandelbrot.clojure

    32-bit        64-bit
  1c     4c     1c     4c

   sec    sec    sec    sec
j2  27 j2   7 j2  24 j2   7
 5  64  6  18  5  52  6  15
 6  67  2  28  6  53  1  25

 2  86  1  29  2  75  2  25
 1  89  5  56  1  76  5  51

Recommendation: Keep 5 and 6.  Remove 1 and 2 from the site.

----------------------------------------------------------------------
Older results below:

Results for different numbers of threads, the first parameter of the
function modified-pmap in mandelbrot.clj-2.clj

The 1-thread test uses the sequential function map over pixel rows.
The tests with 2 or more threads use my function modified-pmap, which
I have some experimental evidence never run more than the specified
number of threads at a time, and only have fewer threads running for a
small fraction of the time, after noticing one has finished, and
before starting up the next one.

----------------------------------------------------------------------
These were all produced on my iMac, whose specs are given in the
RESULTS file.

                         Threads
Test             1          2          3          4
------       ---------  ---------  ---------  ---------
quick   real 0m 2.783s  0m 2.188s  0m 2.036s  0m 2.060s
	user 0m 2.945s	0m 2.994s  0m 2.797s  0m 2.844s
	sys  0m 0.302s	0m 0.303s  0m 0.286s  0m 0.289s

medium  real 0m 7.394s	0m 5.688s  0m 5.786s  0m 5.994s
	user 0m 8.089s	0m 9.188s  0m 9.095s  0m 9.746s
	sys  0m 0.655s	0m 0.796s  0m 0.773s  0m 0.784s

long    real 5m28.011s  3m 4.186s  3m 5.168s  3m 4.100s
	user 5m27.926s	5m36.292s  5m34.456s  5m36.090s
	sys  0m 3.024s	0m 4.824s  0m 4.825s  0m 4.852s


----------------------------------------------------------------------
Results on my MacBook Pro, with these specs:

2.2 GHz Intel Core 2 Duo (2 cores)
2 GB 667 MHz DDR2 SDRAM
Mac OS X 10.5.7

I'm surprised that the user time is so much higher for 2 or more
threads, vs. the 1-thread case, at least for the long test.  I'd like
to know why that happens.

                         Threads
Test             1          2          3
------       ---------  ---------  ---------
quick   real 0m 2.093s  0m 2.062s  0m 2.014s
	user 0m 2.860s	0m 2.860s  0m 2.779s
	sys  0m 0.276s	0m 0.274s  0m 0.278s
				   	 
medium  real 0m 7.184s	0m 5.524s  0m 5.822s
	user 0m 7.761s	0m 8.768s  0m 9.344s
	sys  0m 0.598s	0m 0.707s  0m 0.681s
				   	 
long    real 7m 2.059s	4m52.300s  4m56.908s
	user 6m58.475s	8m48.858s  8m46.856s
	sys  0m 4.015s	0m 6.903s  0m 7.267s
