iMac specs:

2.16 GHz Intel Core 2 Duo (2 cores)
2 GB RAM  667 MHz DDR2 SDRAM
Running Mac OS X 10.5.7

"The Computer Language Benchmarks Game" web site benchmark machine:

Quad-core 2.4Ghz Intel Q6600
4GB RAM
250GB SATA II disk drive
Ubuntu (TM) 9.04 Linux Kernel 2.6.28-11-generic


Times are real / user / sys on my iMac, with the "long" versions of
the tests, unless otherwise stated.  "real" is elapsed time from start
to finish, so if it is significantly less than (user+sys), it is a
sign that the program is using more than one processor core.

When a Clojure benchmark is described as being "5 x java", for
example, it means that the total of the Clojure "user + sys" time is 5
times more than the total of the Java "user + sys" time.

        |  sbcl  |  perl  |   ghc  |  java  |   clj
-----------------------------------------------------

                                               clj-10 uses mutable Java arrays
fann-   |  80.6  | 6427.6 | 103.4  |  38.7  |  315.6
kuch    |  80.3  | 6376.4 | 199.1  |  69.2  |  314.1
        |   0.1  |   13.8 |   0.7  |   0.2  |    2.4  4.6 x java

           clj-8    clj-9    clj-6
         mutable   trans-
         arrays    ients
fann-   | 1571.6 | 5067.9 | 8299.9 |        |
kuch    | 1565.0 | 5030.8 | 8995.6 |        |
        |    9.4 |   52.3 |  302.4 |        |
          22.7 x    73 x     134 x
           java     java     java

                                                clj-3 (1 thread)
mand-   |   90.2 | out of |  32.7  |  28.8  |  148.3
elbrot  |   89.6 | mem    |  59.3  |  53.9  |  151.4
        |    0.3 | (?)    |   0.8  |   0.4  |    1.7  2.8 x java

                                                clj-3 (4 parallel threads)
mand-   |        |        |        |        |   88.0
elbrot  |        |        |        |        |  160.9
        |        |        |        |        |    2.6  3.0 x java

                                               clj-11 (uses mutable Java arrays)
n-      |  39.3  | 2682.8 |        |  25.9  |   70.5
body    |  39.1  | 2675.3 | crash  |  25.9  |   70.4
        |   0.1  |    3.7 |        |   0.1  |    1.3  2.8 x java

           clj-9    clj-8     clj-6    clj-7    clj-5
n-      |  83.0   | 278.0  |  965.2 | 2992.6 | 3560.2
body    |  82.9   | 277.6  |  948.7 | 2982.8 | 3562.1
        |   1.4   |   3.6  |   13.4 |   20.8 |   34.0
          3.2 x    10.8 x     37 x    115 x    138 x
          java      java      java    java     java

regex-  | needs  |  75.0  | needs  |  23.8  |   52.0
dna     | regex  |  73.3  | regex  |  38.0  |   52.3
        |  lib   |   0.6  |  lib   |   1.4  |    1.3  1.4 x java

                                   |            clj-8
rcomp   |   8.3  |  11.4  |  10.1  |   9.0  |   53.8
        |   4.8  |   7.9  |   5.1  |   3.9  |   51.3
        |   2.1  |   2.3  |   4.0  |   1.3  |    2.1  10.3 x java

                                                clj-6
rcomp   |        |        |        |        |   55.0
        |        |        |        |        |   74.0
        |        |        |        |        |    4.3  15.1 x java

                                   |            clj-7 (uses new transients)
k-nuc-  | 190.9  | 306.0  |  80.9  |  51.4  |  697.9
leotide | 187.9  | 302.7  | 130.2  |  90.5  |  690.9
        |   2.4  |   1.9  |   4.5  |   1.6  |   15.4  7.7 x java

                                                clj-6 (no transients)
k-nuc-  |        |        |        |        | 1286.4
leotide |        |        |        |        | 1118.1
        |        |        |        |        |   21.8  12.1 x java

k-nucleotide medium test, all clj, modified-pmap with specified number
of parallel threads, on my iMac (note, these are from
knucleotide.clj-5.clj, not the slightly improved knucleotide.clj-6.clj
version):
        |   1    |   2    |   3    |   4    |   5    |   6    |
        |  74.9  |  70.7  |  77.2  |  76.8  |  82.5  |  77.8  |
        | 125.9  | 122.1  | 134.6  | 134.0  | 143.4  | 134.0  |
        |   2.5  |   2.8  |   2.8  |   2.3  |   3.1  |   2.3  |


The longest few benchmark run on my iMac are:

real
mins benchmark test language

127   mandelbrot long perl
106     fannkuch long perl
 12         knuc long clj
  9        fasta long perl
  5         knuc long perl
  5     fannkuch long clj
  3         knuc long sbcl
  2.6 mandelbrot long clj
  2   mandelbrot long sbcl
  1.5     n-body long clj
  1.5       knuc long ghc
  0.9      rcomp long clj
  0.9       knuc long java



mandelbrot notes:

sbcl version implemented with threads.  I run it with only 1 thread.
I haven't debugged why it produces the wrong output yet.

perl version implemented with threads, but my Perl implementation
doesn't have threads, so I made a slight modification for a 1-thread
version that doesn't use them at all.

There are at least two versions of Java source code on shootout web
site.  I'm using the one that uses threads, not the other one that
avoids using threads.

----------------------------------------------------------------------
Hardware and software used

iMac with Intel Core 2 Duo, 2.16 GHz, 2 GB RAM, Mac OS X 10.5.7

% /opt/local/bin/sbcl --version
SBCL 1.0.24
% /opt/local/bin/perl -v

This is perl, v5.8.9 built for darwin-2level

Copyright 1987-2008, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.

% java -version
java version "1.6.0_13"
Java(TM) SE Runtime Environment (build 1.6.0_13-b03-211)
Java HotSpot(TM) 64-Bit Server VM (build 11.3-b02-83, mixed mode)

% javac -version
javac 1.6.0_13

user> (clojure-version)
"1.1.0-alpha-SNAPSHOT"

----------------------------------------------------------------------
